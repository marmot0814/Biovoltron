#include <biovoltron/file_io/sam.hpp>
#include <catch.hpp>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <sstream>

using namespace std::string_view_literals;
using namespace biovoltron;
const auto data_path = std::filesystem::path{DATA_PATH};

inline void
CHECK_FILE_IDENTITY(const std::filesystem::path& path,
                    std::string_view expected_result) {
  std::fstream fin(path, std::ios::in);

  REQUIRE(fin.is_open() == true);

  std::ostringstream oss;

  std::vector<SamRecord<>> Records;
  SamRecord record;

  while (fin >> record) Records.emplace_back(record);

  for (auto record : Records) oss << record << '\n';

  // REQUIRE(Records.size() == 1);
  REQUIRE(oss.str() == expected_result);
}

TEST_CASE("sam") {
  SamRecord r;
  // clang-format off
  std::istringstream iss{
    "1:497:R:-272+13M17D24M\t113\t1\t497\t37\t37M\t15\t100338662\t0\tCGGGTCTGACCTGAGGAGAACTGTGCTCCGCCTTCAG\t0;==-==9;>>>>>=>>>>>>>>>>>=>>>>>>>>>>\tXT:A:U\tNM:i:0\tSM:i:37"};
  // clang-format on
  iss >> r;
  REQUIRE(r.qname == "1:497:R:-272+13M17D24M");
  REQUIRE(r.flag == 113);
  REQUIRE(r.rname == "1");
  REQUIRE(r.pos == 497);
  REQUIRE(r.mapq == 37);
  REQUIRE(r.cigar == "37M");
  REQUIRE(r.rnext == "15");
  REQUIRE(r.pnext == 100338662);
  REQUIRE(r.tlen == 0);
  REQUIRE(r.seq == "CGGGTCTGACCTGAGGAGAACTGTGCTCCGCCTTCAG");
  REQUIRE(r.qual == "0;==-==9;>>>>>=>>>>>>>>>>>=>>>>>>>>>>");
  REQUIRE(r.optionals.size() == 3);
  REQUIRE(r.optionals[0] == "XT:A:U");
  REQUIRE(r.optionals[1] == "NM:i:0");
  REQUIRE(r.optionals[2] == "SM:i:37");
  REQUIRE(Interval{r} == Interval{"1", 497 - 1, 497 - 1 + 37, '-'});
}

TEST_CASE("Multiple records") {
  SamRecord rec1, rec2, rec3;
  // clang-format off
  std::istringstream iss{
      "K00208:8901012:YAP012:3:2116:4462:47454\t147\tchr1\t3178434\t0\t98M\t=\t3177955\t-577\tCTGTTTTGTGACCAATTATATGGNCAATTTCGGAGAAGGTCCTGTGAGGTGCTGAGAAGAAGGTATATCCTTTTGTTTTAGGATAAAATGTTCTGTAG\tJFAJJAJFF-<<<JJFFFJA7-7!<JJJFF-FF7-FJJJFFJJJFJJJJJ<FJAAFJJJFJAFJFJJ7JJJJJJFJJJJJFJJJJJJJJJJJJFFFAA\tNH:i:6\tHI:i:1\tnM:i:5\tAS:i:186\tRG:Z:YAP012L3_TGACCAA\n"
      "K00208:8901012:YAP012:3:2218:2605:22608\t419\tchr1\t3178777\t0\t59M\t=\t4083680\t905004\tTATGAAGCGTCCCTCCTTGTCTTTTTTGATAACTTTGGGTGGGAAGCCGATTTTATCCG\tAAAAFJJ-7F-77AAJFJJJFJJFJJJ-FFJF-F<FFAFJ-777A7-7FAJJJJFJJFF\tNH:i:43\tHI:i:29\tnM:i:3\tAS:i:149\tRG:Z:YAP012L3_TGACCAA\n"
      "K00208:8901012:YAP012:3:2120:10713:35356\t419\tchr1\t3179431\t1\t100M\t=\t3349771\t170441\tGTGGATGTGGAGAAAGAGGAACACTCCTCCATTGTTGGTGGGATTGCAGGCATGTACAACCACTCAGGAAATCAGTCTGGCGGTTCCTCAGTAAATTGGA\tAAFFFJJJJJJJJFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ-AJFJJJJJJJJJJFJJJJJJJJJFJJJJJJJJJJJJJJJ-FAJJJJJJ\tNH:i:4\tHI:i:1\tnM:i:5\tAS:i:187\tRG:Z:YAP012L3_TGACCAA\n"};
  // clang-format on
  iss >> rec1 >> rec2 >> rec3;

  // REC1
  REQUIRE(rec1.qname == "K00208:8901012:YAP012:3:2116:4462:47454");
  REQUIRE(rec1.flag == 147);
  REQUIRE(rec1.rname == "chr1");
  REQUIRE(rec1.pos == 3178434);
  REQUIRE(rec1.mapq == 0);
  REQUIRE(rec1.cigar == "98M");
  REQUIRE(rec1.rnext == "=");
  REQUIRE(rec1.pnext == 3177955);
  REQUIRE(rec1.tlen == -577);
  // clang-format off
  REQUIRE(rec1.seq == "CTGTTTTGTGACCAATTATATGGNCAATTTCGGAGAAGGTCCTGTGAGGTGCTGAGAAGAAGGTATATCCTTTTGTTTTAGGATAAAATGTTCTGTAG");
  REQUIRE(rec1.qual == "JFAJJAJFF-<<<JJFFFJA7-7!<JJJFF-FF7-FJJJFFJJJFJJJJJ<FJAAFJJJFJAFJFJJ7JJJJJJFJJJJJFJJJJJJJJJJJJFFFAA");
  // clang-format on
  REQUIRE(rec1.optionals.size() == 5);
  REQUIRE(rec1.optionals[0] == "NH:i:6");
  REQUIRE(rec1.optionals[1] == "HI:i:1");
  REQUIRE(rec1.optionals[2] == "nM:i:5");
  REQUIRE(rec1.optionals[3] == "AS:i:186");
  REQUIRE(rec1.optionals[4] == "RG:Z:YAP012L3_TGACCAA");
  // REC2
  REQUIRE(rec2.qname == "K00208:8901012:YAP012:3:2218:2605:22608");
  REQUIRE(rec2.flag == 419);
  REQUIRE(rec2.rname == "chr1");
  REQUIRE(rec2.pos == 3178777);
  REQUIRE(rec2.mapq == 0);
  REQUIRE(rec2.cigar == "59M");
  REQUIRE(rec2.rnext == "=");
  REQUIRE(rec2.pnext == 4083680);
  REQUIRE(rec2.tlen == 905004);
  REQUIRE(rec2.seq
          == "TATGAAGCGTCCCTCCTTGTCTTTTTTGATAACTTTGGGTGGGAAGCCGATTTTATCCG");
  REQUIRE(rec2.qual
          == "AAAAFJJ-7F-77AAJFJJJFJJFJJJ-FFJF-F<FFAFJ-777A7-7FAJJJJFJJFF");
  REQUIRE(rec2.optionals.size() == 5);
  REQUIRE(rec2.optionals[0] == "NH:i:43");
  REQUIRE(rec2.optionals[1] == "HI:i:29");
  REQUIRE(rec2.optionals[2] == "nM:i:3");
  REQUIRE(rec2.optionals[3] == "AS:i:149");
  REQUIRE(rec2.optionals[4] == "RG:Z:YAP012L3_TGACCAA");
  // REC3
  REQUIRE(rec3.qname == "K00208:8901012:YAP012:3:2120:10713:35356");
  REQUIRE(rec3.flag == 419);
  REQUIRE(rec3.rname == "chr1");
  REQUIRE(rec3.pos == 3179431);
  REQUIRE(rec3.mapq == 1);
  REQUIRE(rec3.cigar == "100M");
  REQUIRE(rec3.rnext == "=");
  REQUIRE(rec3.pnext == 3349771);
  REQUIRE(rec3.tlen == 170441);
  // clang-format off
  REQUIRE(rec3.seq ==
          "GTGGATGTGGAGAAAGAGGAACACTCCTCCATTGTTGGTGGGATTGCAGGCATGTACAACCACTCAGGAAATCAGTCTGGCGGTTCCTCAGTAAATTGGA");
  REQUIRE(rec3.qual ==
          "AAFFFJJJJJJJJFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ-AJFJJJJJJJJJJFJJJJJJJJJFJJJJJJJJJJJJJJJ-FAJJJJJJ");
  // clang-format on
  REQUIRE(rec3.optionals.size() == 5);
  REQUIRE(rec3.optionals[0] == "NH:i:4");
  REQUIRE(rec3.optionals[1] == "HI:i:1");
  REQUIRE(rec3.optionals[2] == "nM:i:5");
  REQUIRE(rec3.optionals[3] == "AS:i:187");
  REQUIRE(rec3.optionals[4] == "RG:Z:YAP012L3_TGACCAA");
}

TEST_CASE("Header test") {
  SamHeader header_rec;
  SamRecord rec1, rec2, rec3;

  std::istringstream header_iss{
    "@HD\tVN:1.5\tSO:coordinate\n"
    "@SQ\tSN:chr1\tLN:195471971\n"
    "@SQ\tSN:chr10\tLN:130694993\n"};

  // clang-format off
  std::istringstream rec_iss{
      "K00208:8901006:YAP006:8:2110:17066:26951\t355\tchr1\t3153827\t0\t101M\t=\t3153840\t114\tGTGACGAGCTGGTAGGTAAGTTGACTCATGTCCTGATTGAATTGACTAAAAAACTAAATTAAATTCATGTTTTAGATCCATCCTTACTTGTCATTTTTCCA\tAAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\tNH:i:41\tHI:i:14\tnM:i:0\tAS:i:200\tRG:Z:YAP006L8_TGACCAA\t\n"
      "K00208:8901006:YAP006:8:2108:26108:42407\t355\tchr1\t3153830\t0\t101M\t=\t3153933\t204\tACGAGCTGGTAGGTAAGTTGACTCATGTCCTGATTGAATTGACTAAAAAACTAAATTAAATTCATGTTTTAGATCCATCCTTACTTGTCATTTTTCCAGTT\tAAFFFJFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJFJJJJJJJJJJJFJJJJJJJJJJJJJJFJJFJJJJJJJJJFFJJFAJJJJJJJJFJJJJJJJJFJ\tNH:i:22\tHI:i:3\tnM:i:0\tAS:i:200\tRG:Z:YAP006L8_TGACCAA\t\n"
      "K00208:8901012:YAP012:3:2108:24769:24120\t355\tchr1\t3153830\t0\t101M\t=\t3153883\t154\tACGAGCTGGTAGGTAAGTTGACTCATGTCCTGATTGAATTGACTAAAAAACTAAATTAAATTCATGTTTTAGATCCATCCTTACTTGTCATTTTTCCAGTT\tAAFFFJFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\tNH:i:25\tHI:i:3\tnM:i:0\tAS:i:200\tRG:Z:YAP012L3_TGACCAA\t\n"};
  // clang-format on
  header_iss >> header_rec;
  rec_iss >> rec1 >> rec2 >> rec3;

  REQUIRE(header_rec.lines[0] == "@HD\tVN:1.5\tSO:coordinate");
  REQUIRE(header_rec.lines[1] == "@SQ\tSN:chr1\tLN:195471971");
  REQUIRE(header_rec.lines[2] == "@SQ\tSN:chr10\tLN:130694993");

  REQUIRE(rec1.qname == "K00208:8901006:YAP006:8:2110:17066:26951");
  REQUIRE(rec1.flag == 355);
  REQUIRE(rec1.rname == "chr1");
  REQUIRE(rec1.pos == 3153827);
  REQUIRE(rec1.mapq == 0);
  REQUIRE(rec1.cigar == "101M");
  REQUIRE(rec1.rnext == "=");
  REQUIRE(rec1.pnext == 3153840);
  REQUIRE(rec1.tlen == 114);
  // clang-format off
  REQUIRE(rec1.seq ==
          "GTGACGAGCTGGTAGGTAAGTTGACTCATGTCCTGATTGAATTGACTAAAAAACTAAATTAAATTCATGTTTTAGATCCATCCTTACTTGTCATTTTTCCA");
  REQUIRE(rec1.qual ==
          "AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ");
  // clang-format on
  REQUIRE(rec1.optionals.size() == 5);
  REQUIRE(rec1.optionals[0] == "NH:i:41");
  REQUIRE(rec1.optionals[1] == "HI:i:14");
  REQUIRE(rec1.optionals[2] == "nM:i:0");
  REQUIRE(rec1.optionals[3] == "AS:i:200");
  REQUIRE(rec1.optionals[4] == "RG:Z:YAP006L8_TGACCAA");

  REQUIRE(rec2.qname == "K00208:8901006:YAP006:8:2108:26108:42407");
  REQUIRE(rec2.flag == 355);
  REQUIRE(rec2.rname == "chr1");
  REQUIRE(rec2.pos == 3153830);
  REQUIRE(rec2.mapq == 0);
  REQUIRE(rec2.cigar == "101M");
  REQUIRE(rec2.rnext == "=");
  REQUIRE(rec2.pnext == 3153933);
  REQUIRE(rec2.tlen == 204);
  // clang-format off
  REQUIRE(rec2.seq ==
          "ACGAGCTGGTAGGTAAGTTGACTCATGTCCTGATTGAATTGACTAAAAAACTAAATTAAATTCATGTTTTAGATCCATCCTTACTTGTCATTTTTCCAGTT");
  REQUIRE(rec2.qual ==
          "AAFFFJFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJFJJJJJJJJJJJFJJJJJJJJJJJJJJFJJFJJJJJJJJJFFJJFAJJJJJJJJFJJJJJJJJFJ");
  // clang-format on
  REQUIRE(rec2.optionals.size() == 5);
  REQUIRE(rec2.optionals[0] == "NH:i:22");
  REQUIRE(rec2.optionals[1] == "HI:i:3");
  REQUIRE(rec2.optionals[2] == "nM:i:0");
  REQUIRE(rec2.optionals[3] == "AS:i:200");
  REQUIRE(rec2.optionals[4] == "RG:Z:YAP006L8_TGACCAA");

  REQUIRE(rec3.qname == "K00208:8901012:YAP012:3:2108:24769:24120");
  REQUIRE(rec3.flag == 355);
  REQUIRE(rec3.rname == "chr1");
  REQUIRE(rec3.pos == 3153830);
  REQUIRE(rec3.mapq == 0);
  REQUIRE(rec3.cigar == "101M");
  REQUIRE(rec3.rnext == "=");
  REQUIRE(rec3.pnext == 3153883);
  REQUIRE(rec3.tlen == 154);
  // clang-format off
  REQUIRE(rec3.seq ==
          "ACGAGCTGGTAGGTAAGTTGACTCATGTCCTGATTGAATTGACTAAAAAACTAAATTAAATTCATGTTTTAGATCCATCCTTACTTGTCATTTTTCCAGTT");
  REQUIRE(rec3.qual ==
          "AAFFFJFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ");
  // clang-format off
  REQUIRE(rec3.optionals.size() == 5);
  REQUIRE(rec3.optionals[0] == "NH:i:25");
  REQUIRE(rec3.optionals[1] == "HI:i:3");
  REQUIRE(rec3.optionals[2] == "nM:i:0");
  REQUIRE(rec3.optionals[3] == "AS:i:200");
  REQUIRE(rec3.optionals[4] == "RG:Z:YAP012L3_TGACCAA");
}

TEST_CASE("Header + Record") {
  SamHeader header_rec;
  SamRecord rec1, rec2;

  // clang-format off
  std::istringstream iss{
      "@SQ\tSN:chr19\tLN:61431566\n"
      "@SQ\tSN:chr1_GL456210_random\tLN:169725\n"
      "@SQ\tSN:chr1_GL456211_random\tLN:241735\n"
      "@SQ\tSN:chr1_GL456212_random\tLN:153618\n"
      "@SQ\tSN:chr1_GL456213_random\tLN:39340\n"
      "@SQ\tSN:chr1_GL456221_random\tLN:206961\n"
      "K00208:8901006:YAP006:8:2110:17066:26951\t355\tchr1\t3153827\t0\t101M\t=\t3153840\t114\tGTGACGAGCTGGTAGGTAAGTTGACTCATGTCCTGATTGAATTGACTAAAAAACTAAATTAAATTCATGTTTTAGATCCATCCTTACTTGTCATTTTTCCA\tAAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\tNH:i:41\tHI:i:14\tnM:i:0\tAS:i:200\tRG:Z:YAP006L8_TGACCAA\n"
      "K00208:8901006:YAP006:8:2108:26108:42407\t355\tchr1\t3153830\t0\t101M\t=\t3153933\t204\tACGAGCTGGTAGGTAAGTTGACTCATGTCCTGATTGAATTGACTAAAAAACTAAATTAAATTCATGTTTTAGATCCATCCTTACTTGTCATTTTTCCAGT\tAAFFFJFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJFJJJJJJJJJJJFJJJJJJJJJJJJJJFJJFJJJJJJJJJFFJJFAJJJJJJJJFJJJJJJJJFJ\tNH:i:22\tHI:i:3\tnM:i:0\tAS:i:200\tRG:Z:YAP006L8_TGACCAA\n"};
  // clang-format on

  iss >> header_rec >> rec1 >> rec2;

  REQUIRE(header_rec.lines.size() == 6);
  REQUIRE(header_rec.lines[0] == "@SQ\tSN:chr19\tLN:61431566");
  REQUIRE(header_rec.lines[1] == "@SQ\tSN:chr1_GL456210_random\tLN:169725");
  REQUIRE(header_rec.lines[2] == "@SQ\tSN:chr1_GL456211_random\tLN:241735");
  REQUIRE(header_rec.lines[3] == "@SQ\tSN:chr1_GL456212_random\tLN:153618");
  REQUIRE(header_rec.lines[4] == "@SQ\tSN:chr1_GL456213_random\tLN:39340");
  REQUIRE(header_rec.lines[5] == "@SQ\tSN:chr1_GL456221_random\tLN:206961");

  REQUIRE(rec1.qname == "K00208:8901006:YAP006:8:2110:17066:26951");
  REQUIRE(rec1.flag == 355);
  REQUIRE(rec1.rname == "chr1");
  REQUIRE(rec1.pos == 3153827);
  REQUIRE(rec1.mapq == 0);
  REQUIRE(rec1.cigar == "101M");
  REQUIRE(rec1.rnext == "=");
  REQUIRE(rec1.pnext == 3153840);
  REQUIRE(rec1.tlen == 114);
  // clang-format off
  REQUIRE(rec1.seq ==
          "GTGACGAGCTGGTAGGTAAGTTGACTCATGTCCTGATTGAATTGACTAAAAAACTAAATTAAATTCATGTTTTAGATCCATCCTTACTTGTCATTTTTCCA");
  REQUIRE(rec1.qual ==
          "AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ");
  // clang-format off
  REQUIRE(rec1.optionals.size() == 5);
  REQUIRE(rec1.optionals[0] == "NH:i:41");
  REQUIRE(rec1.optionals[1] == "HI:i:14");
  REQUIRE(rec1.optionals[2] == "nM:i:0");
  REQUIRE(rec1.optionals[3] == "AS:i:200");
  REQUIRE(rec1.optionals[4] == "RG:Z:YAP006L8_TGACCAA");

  REQUIRE(rec2.qname == "K00208:8901006:YAP006:8:2108:26108:42407");
  REQUIRE(rec2.flag == 355);
  REQUIRE(rec2.rname == "chr1");
  REQUIRE(rec2.pos == 3153830);
  REQUIRE(rec2.mapq == 0);
  REQUIRE(rec2.cigar == "101M");
  REQUIRE(rec2.rnext == "=");
  REQUIRE(rec2.pnext == 3153933);
  REQUIRE(rec2.tlen == 204);
  // clang-format off
  REQUIRE(rec2.seq ==
          "ACGAGCTGGTAGGTAAGTTGACTCATGTCCTGATTGAATTGACTAAAAAACTAAATTAAATTCATGTTTTAGATCCATCCTTACTTGTCATTTTTCCAGT");
  REQUIRE(rec2.qual ==
          "AAFFFJFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJFJJJJJJJJJJJFJJJJJJJJJJJJJJFJJFJJJJJJJJJFFJJFAJJJJJJJJFJJJJJJJJFJ");
  // clang-format on
  REQUIRE(rec2.optionals.size() == 5);
  REQUIRE(rec2.optionals[0] == "NH:i:22");
  REQUIRE(rec2.optionals[1] == "HI:i:3");
  REQUIRE(rec2.optionals[2] == "nM:i:0");
  REQUIRE(rec2.optionals[3] == "AS:i:200");
  REQUIRE(rec2.optionals[4] == "RG:Z:YAP006L8_TGACCAA");
}

TEST_CASE("ReadFile_1") {
  std::string_view expected_result{
    "K00208:8901012:YAP012:1:1223:10399:10335\t163\tchr1\t3040075\t255\t100M\t="
    "\t3040192\t218\tCTGACAGATATCTACAGAACATTTTATCCTAAAACAAAAGGATATACCTTCTTCTCAG"
    "CACCTCACAGGACCTTCTCC"
    "AAAATTGACAATATAATTGGTC\t-"
    "AFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJFJJJJJJJJJJJJJJJJJJJJJAJF"
    "AFJFJJJJFJJJ77AJJJAJ"
    "JJFJJ\tNH:i:1\tHI:i:1\tnM:i:0\tAS:i:199\tRG:Z:YAP012L1_TGACCAA\t\n"
    "r004\t4\tref\t16\t30\t6M14N1I5M\t*\t0\t0\tATAGCTCTCAGC\t*\t\t\n"};
  CHECK_FILE_IDENTITY(data_path / "test1.sam", expected_result);
}

TEST_CASE("ReadFile_2") {
  // clang-format off
  std::string_view expected_result{
      "K00208:8901006:YAP006:8:2128:4361:9614\t419\tchr1\t3044919\t0\t101M\t=\t3044939\t121\tAAATTGCTGGTTGTTTGTGAGCCTAGAGGCTGCCTGGGGCTGAGAAAAGAGAAAAACAAACCTGGGTATGCCTCGTAGTTAAAACATTCCTGGGAACATCT\tAAAAFFJJFJJJJJJJJF<JFAJJJAJJFJJFJJJJJJFJJJJJJJJJJJFJFJJAJJAJAJJJJJAFFJJJ<JFJJJAFJFJJJJJJJJJJA-<FJJFJ7\tNH:i:11\tHI:i:2\tnM:i:1\tAS:i:198\tRG:Z:YAP006L8_TGACCAA\t\n"
      "K00208:8901012:YAP012:2:1110:24322:19619\t419\tchr1\t3044919\t0\t101M\t=\t3044939\t121\tAAATTGCTGGTTGTTTGTGAGCCTAGAGGCTGCCTGGGGCTGAGAAAAGAGAAAAACAAACCTGGGTATGCCTCGTAGTTAAAACATTCCTGGGAACATCT\tAAAFFJJJJJJJJFJJJJJJJJJJJJJJJJJJJJJJJJJJFJJJJJJJJJJJJJJJJJJJJJJJJJJFJJJJJJJJJJJFJJJJJJJJJJJJJJJJJJJJF\tNH:i:11\tHI:i:2\tnM:i:1\tAS:i:198\tRG:Z:YAP012L2_TGACCAA\t\n"
      "K00208:8911005:YBP005:3:1217:23612:34565\t163\tchr1\t3044920\t0\t101M\t=\t3044958\t139\tAATTGCTGGTTGTTTGTGAGCCTAGAGGCTGCCTGGGGCTGAGAAAAGAGAAAAACAAACCTGGGTATGCCTCGTAGTTAAAACATTCCTGGGAACATCTT\tAAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJFFJJJJJJJJJJJJJJJJJJJJJJJ\tNH:i:10\tHI:i:1\tnM:i:0\tAS:i:200\tRG:Z:YBP005L3_TGACCAA\t\n"
      "K00208:8901012:YAP012:3:2105:28219:10159\t355\tchr1\t3044924\t0\t101M\t=\t3044977\t154\tGCTGGTTGTTTGTGAGCCTAGAGGCTGCCTGGGGCTGAGAAAAGAGAAAAACAAACCTGGGTATGCCTCGTAGTTAAAACATTCCTGGGAACATCTTGACC\tAAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJFFJJJJJJJJJJJJJJJJJJJJJJJJJ\tNH:i:6\tHI:i:2\tnM:i:0\tAS:i:200\tRG:Z:YAP012L3_TGACCAA\t\n"
      "K00208:8901006:YAP006:8:1224:25510:34758\t163\tchr1\t3044928\t0\t101M\t=\t3044987\t160\tGTTGTTTGTGAGCCTAGAGGCTGCCTGGGGCTGAGAAAAGAGAAAAACAAACCTGGGTATGCCTCGTAGTTAAAACATTCCTGGGAACATCTTGACCATAA\tAAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\tNH:i:6\tHI:i:1\tnM:i:0\tAS:i:200\tRG:Z:YAP006L8_TGACCAA\t\n"
      "K00208:8901012:YAP012:3:2213:1539:11864\t83\tchr1\t3044935\t0\t101M\t=\t3044911\t-125\tGTGAGCCTAGAGGCTGCCTGGGGCTGAGAAAAGAGAAAAACAAACCTGGGTATGCCTCGTAGTTAAAACATTCCTGGGAACATCTTGACCATAAGATAAAG\tJJJFJJJJJJAA-JJJFJJJJJJJJJJJJFJJJJJJJFJJJJF-JAJJJJFAJJJFFFJJJJJJJFJAJJJJJJJJJJJJJFJFJFF7-JJJJFJFF7AAA\tNH:i:13\tHI:i:1\tnM:i:0\tAS:i:198\tRG:Z:YAP012L3_TGACCAA\t\n"};
  // clang-format on
  CHECK_FILE_IDENTITY(data_path / "test2.sam", expected_result);
}

TEST_CASE("ReadFile_3 (missing optional_fields)") {
  std::string_view expected_result{
    "r004\t4\tref\t16\t30\t6M14N1I5M\t*\t0\t0\tATAGCTCTCAGC\t*\t\t\n"};

  CHECK_FILE_IDENTITY(data_path / "test3.sam", expected_result);
}

TEST_CASE("SamUtil::compute_tlen") {
  REQUIRE(SamUtil::compute_tlen(30902376, "86S27M35S"sv, false, 42046135,
                                "148M", false)
          == 11143881);
  REQUIRE(SamUtil::compute_tlen(36254854, "148M", true, 19146290, "148M", true)
          == -17108565);
  REQUIRE(
    SamUtil::compute_tlen(22691979, "2S146M", false, 22691980, "148M", true)
    == -145);
  REQUIRE(SamUtil::compute_tlen(25686371, "148M", false, 25982457, "148M", true)
          == 295940);
}
